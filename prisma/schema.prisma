// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String? // ? means optional 
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) // Member since 2020
  updatedAt DateTime @updatedAt

  // Relations: One-to-Many
  posts Post[] //One-to-Many
  comments Comment[] //One-to-Many
  likes Like[] //One-to-Many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  notifications Notification[] @relation("userNotifications") //notifications received by a user
  notificationsCreated Notification[] @relation("notificationCreator") // notifications created by a user
}

model Post{
  id String @id @default(cuid())
  authordID String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  author User @relation(fields: [authordID],references: [id], onDelete: Cascade) // Cascade delete means delete all posts if the author is deleted
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  //Relations
  author User @relation( fields: [authorId],references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // Composite index for faster queries
}

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)

  @@index([userId,postId]) // Composite index for faster queries
  @@unique([userId,postId]) // This prvents the user from liking a post twice
}


model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  follower User @relation("follower", fields: [followerId],references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId],references: [id], onDelete: Cascade)

  @@index([followerId,followingId])// Composite index for faster queries
  @@id([followerId,followingId]) // Composite primary key that prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   //Who receives the notification               
  creatorId String   // Who sends the notification
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}
